/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>


typedef struct butterQueue
{
	int max;
	int front;
	int rear;
	int itemCount;
	float* queue;
} butterQueue;

void initButterQueue(butterQueue* queue);
float queuePeek(butterQueue* queue);
bool isQueueEmpty(butterQueue* queue);
bool isQueueFull(butterQueue* queue);
int queueSize(butterQueue* queue);
void enqueue(float data, butterQueue* queue);
float dequeue(butterQueue* queue);
void butterEnqueue(float item, butterQueue* measuredQueue, butterQueue* filteredQueue, float *a, float *b);
float filtered_d_input(butterQueue* filteredQueue);


void initButterQueue(butterQueue* queue)
// doesn't delete malloc'd space, so only initialize once
// need to set max as:
// - butter_filter_order for filtered queue
// - butter_filter_order + 1 for measured queue
// before using initiation function
{
	queue->front = 0;
	queue->rear = -1;
	queue->itemCount = 0;
	queue->queue = (float*)malloc(sizeof(float) * (queue->max));
	printf("Queue initialized, size: %i \n", queue->max);
}

float queuePeek(butterQueue* queue) {
   return queue->queue[queue->front];
}

bool isQueueEmpty(butterQueue* queue) {
   return queue->itemCount == 0;
}

bool isQueueFull(butterQueue* queue) {
   return queue->itemCount == queue->max;
}

int queueSize(butterQueue* queue) {
   return queue->itemCount;
}

void enqueue(float data, butterQueue* queue)
{
	if(isQueueFull(queue))
	{
		dequeue(queue);
	}
	if(queue->rear == queue->max - 1)
	{
	  queue->rear = -1;
	}
	queue->queue[++queue->rear] = data;
	queue->itemCount++; //checked: works
}

float dequeue(butterQueue* queue)
{
   float data = queue->queue[queue->front++];
   if(queue->front == (queue->max))
   {
	   queue->front = 0;
   }
   queue->itemCount--;
   return data;
}

/////////////////
//Butter filter//
/////////////////

void butterEnqueue(float item, butterQueue* measuredQueue, butterQueue* filteredQueue, float *a, float *b)
// Using butterFilter, adds next filtered queue entry
{
    
    enqueue(item, measuredQueue); //works
    if(!isQueueFull(filteredQueue))
    {
        enqueue(item, filteredQueue); // Saves value to measuredQueue...
    }
    else
    	// Enqueue new filtered value
    {
        printf("queue full!\n");
    	float dif_equation = b[0] * measuredQueue->queue[measuredQueue->rear];
    	printf("filter terms: \n%i, %f\n", measuredQueue->rear, measuredQueue->queue[measuredQueue->rear]);
    	for(int idx = 1; idx < filteredQueue->max;++idx)
    	{
    	    int f_idx = filteredQueue->rear + 1 - idx; // queue idea was that x[-1] was possible....
    	    int m_idx = measuredQueue->rear - idx;
    	    if(m_idx < 0)
    	    {
    	        m_idx += measuredQueue->max;
    	    }
    	    if(f_idx < 0)
    	    {
    	        f_idx += filteredQueue->max;
    	    }
    		dif_equation += b[idx] * measuredQueue->queue[m_idx] - a[idx] * filteredQueue->queue[f_idx];
    		printf("%i, %f, %i, %f\n",m_idx, measuredQueue->queue[measuredQueue->rear-idx], f_idx, filteredQueue->queue[f_idx]);
    	}
        enqueue(dif_equation, filteredQueue);
    }
}

///////////////////////////////////////////
// Specific implementation to get d_input//
///////////////////////////////////////////
float filtered_d_input(butterQueue* filteredQueue)
{
	if(filteredQueue->itemCount > 1)
	{
		return filteredQueue->queue[filteredQueue->rear - 1]
									- filteredQueue->queue[filteredQueue->rear];
	}
	else
	{
		return 0.0;
	}
}

#define BUTTER_FILTER_ORDER 3

butterQueue filtered_queue = {BUTTER_FILTER_ORDER}; // setting queue size
butterQueue measured_queue = {BUTTER_FILTER_ORDER + 1}; // setting queue size

float FB[] = {1.0000, -1.6330, 0.6906}; //a
float FFW[] = {0.0144, 0.0288, 0.0144}; //b

void print_queue(butterQueue* queue){
    for(int index = 0; index < queue->max;++index){
        printf("%i, %f\n", index, queue->queue[index]);
    }
}


int main()
{
	initButterQueue(&filtered_queue);
	initButterQueue(&measured_queue);
	/// printf("mp: %p, fp: %p\n", &measured_queue, &filtered_queue); // correct pointers being passed
	
	// printf("sizeof(f_queue) = %i, sizeof(m_queue) = %i\n", sizeof(filtered_queue.queue), sizeof(measured_queue.queue)); // both have size 8? should be 8 and 12 respectively

    // enqueue(5.0, &filtered_queue); // this works....
    // printf("%f added to filtered_queue\n", &filtered_queue.queue[filtered_queue.front]);
	
	float current_distance = 4.0;
    butterEnqueue(current_distance, &measured_queue, &filtered_queue, FB, FFW);
    current_distance = 3.0;
    butterEnqueue(current_distance, &measured_queue, &filtered_queue, FB, FFW);
    current_distance = 2.0;
    butterEnqueue(current_distance, &measured_queue, &filtered_queue, FB, FFW);
    
    printf("Initialized Filter:\n");
    print_queue(&filtered_queue);
    printf("Filtered front idx: %i, value: %f\n", filtered_queue.front, filtered_queue.queue[filtered_queue.front]);
    printf("Filtered rear idx: %i, value: %f\n\n", filtered_queue.rear, filtered_queue.queue[filtered_queue.rear]);

    
    //////////////////////////////////////////
    printf("\n\n1.0 added\n");
    current_distance = 1.0;
    butterEnqueue(current_distance, &measured_queue, &filtered_queue, FB, FFW);
    printf("Measured queue:\n");
    print_queue(&measured_queue);
    printf("Measured front idx: %i, value: %f\n", measured_queue.front, measured_queue.queue[measured_queue.front]);
    printf("Measured rear idx: %i, value: %f\n", measured_queue.rear, measured_queue.queue[measured_queue.rear]);

    printf("\nFiltered value: %f\n", filtered_queue.queue[filtered_queue.rear]);
    printf("Filtered queue:\n");
    print_queue(&filtered_queue);
    printf("Filtered front idx: %i, value: %f\n", filtered_queue.front, filtered_queue.queue[filtered_queue.front]);
    printf("Filtered rear idx: %i, value: %f\n\n", filtered_queue.rear, filtered_queue.queue[filtered_queue.rear]);

    ///////////////////////////////////
    printf("\n\n0.0 added\n");
    current_distance = 0.0;
    butterEnqueue(current_distance, &measured_queue, &filtered_queue, FB, FFW);

    printf("Measured value: %f\n", measured_queue.queue[measured_queue.rear]);
    printf("Measured queue:\n");
    print_queue(&measured_queue);
    printf("Measured front idx: %i, value: %f\n", measured_queue.front, measured_queue.queue[measured_queue.front]);
    printf("Measured rear idx: %i, value: %f\n", measured_queue.rear, measured_queue.queue[measured_queue.rear]);

    printf("\nFiltered value: %f\n", filtered_queue.queue[filtered_queue.rear]);
    printf("Filtered queue:\n");
    print_queue(&filtered_queue);
    printf("Filtered front idx: %i, value: %f\n", filtered_queue.front, filtered_queue.queue[filtered_queue.front]);
    printf("Filtered rear idx: %i, value: %f\n\n", filtered_queue.rear, filtered_queue.queue[filtered_queue.rear]);

    
}





